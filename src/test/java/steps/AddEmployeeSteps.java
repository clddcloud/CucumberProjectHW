package steps;

import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import pages.DashboardPage;
import utils.CommonMethods;
import utils.ConfigReader;
import utils.Constants;

import java.io.IOException;

public class AddEmployeeSteps extends CommonMethods {
    @When("user clicks on PIM")
    public void user_clicks_on_pim() {
        click (dashboardPage.pimButton);
    }

    @When("user clicks on Add Employee")
    public void user_clicks_on_add_employee() {
        click (dashboardPage.addEmployeeButton);
    }

    @Then("user is able to add new employees")
    public void user_is_able_to_add_new_employees() throws IOException {
        Assert.assertEquals(driver.getCurrentUrl(),ConfigReader.read("urlAddEmployee"));
    }

    @When("user enters firstname")
    public void user_enters_firstname() throws IOException {
        sendText(ConfigReader.read("employeeFirstName"), addEmployeePage.firstNameField);
    }

    @When("user is able to enter middlename")
    public void user_is_able_to_enter_middlename() {
        Assert.assertTrue(addEmployeePage.middleNameField.isDisplayed()&& addEmployeePage.middleNameField.isEnabled());
    }

    @When("user enters lastname")
    public void user_enters_lastname() throws IOException {
        sendText(ConfigReader.read("employeeLastName"), addEmployeePage.lastNameField);
    }

    @When("user see that ID is autogenerated")
    public void user_see_that_id_is_autogenerated() {
        Assert.assertNotEquals(null, addEmployeePage.employeeIdField.getText());
    }

    @When("user clicks on save button")
    public void user_clicks_on_save_button() {
       click(addEmployeePage.saveButton);
    }

    @Then("new page is opened")
    public void new_page_is_opened() throws IOException {
        Assert.assertNotEquals(driver.getCurrentUrl(), ConfigReader.read("urlAddEmployee"));
    }

    @Then("user can see new employee added with firstname and lastname entered and ID")
    public void user_can_see_new_employee_added_with_firstname_and_lastname_entered_and_id() throws IOException {
       Assert.assertEquals(ConfigReader.read("employeeFirstName"), personalDetailsPage.firstNameField.getAttribute("value"));
       Assert.assertEquals(ConfigReader.read("employeeLastName"), personalDetailsPage.lastNameField.getAttribute("value"));
       Assert.assertNotEquals(null, personalDetailsPage.idField);
    }

    @When("user enters ID")
    public void user_enters_id() throws IOException {
        sendText(String.valueOf(Constants.randomID), addEmployeePage.employeeIdField);
    }

    @Then("user can see new employee added with firstname, lastname and ID entered")
    public void user_can_see_new_employee_added_with_firstname_lastname_and_id_entered() throws IOException {
        Assert.assertEquals(ConfigReader.read("employeeFirstName"), personalDetailsPage.firstNameField.getAttribute("value"));
        Assert.assertEquals(ConfigReader.read("employeeLastName"), personalDetailsPage.lastNameField.getAttribute("value"));
        Assert.assertEquals(String.valueOf(Constants.randomID), personalDetailsPage.idField.getAttribute("value"));
    }

    @And("new employee is not created")
    public void newEmployeeIsNotCreated() throws IOException {
        Assert.assertEquals(driver.getCurrentUrl(), ConfigReader.read("urlAddEmployee"));
    }

    @Then("user see required firstname")
    public void userSeeRequiredFirstname() {
        Assert.assertEquals(addEmployeePage.firstNameField.getAttribute("class"),"formInputText validation-error");

    }

    @Then("user see required lastname")
    public void userSeeRequiredLastname() {
        Assert.assertEquals(addEmployeePage.lastNameField.getAttribute("class"),"formInputText validation-error");

    }

    @And("user enters duplicate ID")
    public void userEntersDuplicateID() throws IOException {
        sendText(ConfigReader.read("invalidID"), addEmployeePage.employeeIdField);
    }

    @Then("user sees an error message")
    public void userSeesAnErrorMessage() {
        WebElement warningMsg= driver.findElement(By.xpath("//div[@class='message warning fadable']"));
        Assert.assertTrue(warningMsg.isDisplayed());
    }
}
